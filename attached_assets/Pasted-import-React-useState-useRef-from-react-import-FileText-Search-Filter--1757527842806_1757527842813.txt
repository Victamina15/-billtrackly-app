import React, { useState, useRef } from 'react';
import { 
  FileText, 
  Search, 
  Filter, 
  Eye, 
  Edit3, 
  DollarSign, 
  Send, 
  Printer, 
  X, 
  Check, 
  Clock, 
  Package, 
  AlertCircle,
  Phone,
  Mail,
  Calendar,
  User,
  CreditCard,
  Banknote,
  Landmark,
  RefreshCw,
  CheckCircle,
  XCircle,
  PlayCircle,
  Trash2,
  Receipt,
  ClipboardList,
  Download,
  Settings,
  MoreVertical,
  Plus,
  Minus,
  TrendingUp,
  Users,
  Building,
  MapPin
} from 'lucide-react';

const GestionOrdenes = () => {
  // Estados principales
  const [orders, setOrders] = useState([
    {
      id: 'INV-009',
      numero: 'FAC-009',
      cliente: 'Juan Pérez',
      telefono: '8091502025',
      correo: 'juan@email.com',
      direccion: 'Av. Winston Churchill, Santo Domingo',
      cedula: '00112345678',
      total: 378.00,
      subtotal: 320.34,
      itbis: 57.66,
      descuento: 0,
      estado: 'Recibido',
      fechaRecibido: '2025-09-04',
      fechaRetiro: '2025-09-06',
      horaRecibido: '16:53',
      metodoPago: 'Pendiente',
      empleado: 'Sistema',
      pagado: false,
      entregado: false,
      notas: 'Cliente prefiere entrega temprano',
      urgente: false,
      articulos: [
        { id: 1, nombre: 'CAMISAS', servicio: 'Lavado y Planchado', cantidad: 2, precio: 85, estado: 'Pendiente', notas: 'Manchas en el cuello' },
        { id: 2, nombre: 'PANTALONES', servicio: 'Lavado Seco', cantidad: 1, precio: 80, estado: 'Pendiente', notas: '' }
      ]
    },
    {
      id: 'INV-008',
      numero: 'FAC-008',
      cliente: 'María García',
      telefono: '8095551234',
      correo: 'maria@email.com',
      direccion: 'Piantini, Santo Domingo',
      cedula: '00187654321',
      total: 450.50,
      subtotal: 381.78,
      itbis: 68.72,
      descuento: 25.00,
      estado: 'En Proceso',
      fechaRecibido: '2025-09-03',
      fechaRetiro: '2025-09-05',
      horaRecibido: '19:21',
      metodoPago: 'Efectivo',
      empleado: 'María Fernández',
      pagado: true,
      entregado: false,
      notas: 'Cliente VIP - Descuento aplicado',
      urgente: true,
      articulos: [
        { id: 3, nombre: 'VESTIDOS', servicio: 'Lavado y Planchado', cantidad: 1, precio: 220, estado: 'En Proceso', notas: 'Vestido de gala' },
        { id: 4, nombre: 'BLUSAS', servicio: 'Planchado', cantidad: 3, precio: 45, estado: 'Completado', notas: '' }
      ]
    },
    {
      id: 'INV-007',
      numero: 'FAC-007',
      cliente: 'Pedro López',
      telefono: '8097779999',
      correo: '',
      direccion: 'Zona Colonial, Santo Domingo',
      cedula: '00145612378',
      total: 290.00,
      subtotal: 245.76,
      itbis: 44.24,
      descuento: 0,
      estado: 'Listo',
      fechaRecibido: '2025-09-02',
      fechaRetiro: '2025-09-04',
      horaRecibido: '17:38',
      metodoPago: 'Tarjeta',
      empleado: 'Juan Carlos',
      pagado: true,
      entregado: false,
      notas: '',
      urgente: false,
      articulos: [
        { id: 5, nombre: 'SÁBANAS', servicio: 'Lavado y Planchado', cantidad: 1, precio: 150, estado: 'Completado', notas: 'Juego completo' },
        { id: 6, nombre: 'TOALLAS GRANDES', servicio: 'Lavado', cantidad: 3, precio: 40, estado: 'Completado', notas: '' }
      ]
    }
  ]);

  // Estados de modales y filtros
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterPayment, setFilterPayment] = useState('all');
  const [filterUrgent, setFilterUrgent] = useState('all');
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [showStatusModal, setShowStatusModal] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showNotesModal, setShowNotesModal] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [cancelReason, setCancelReason] = useState('');
  const [orderNotes, setOrderNotes] = useState('');
  const [paymentAmount, setPaymentAmount] = useState(0);
  const [paymentReference, setPaymentReference] = useState('');

  // Estados para reportes
  const [showReports, setShowReports] = useState(false);
  const [reportType, setReportType] = useState('daily');
  const [reportDate, setReportDate] = useState(new Date().toISOString().split('T')[0]);

  // Referencias para impresión
  const ticketRef = useRef();
  const invoiceRef = useRef();

  // Configuración de estados
  const estados = [
    { id: 'Recibido', nombre: 'Recibido', color: 'blue', icon: Package, nextStates: ['En Proceso', 'Cancelado'] },
    { id: 'En Proceso', nombre: 'En Proceso', color: 'yellow', icon: RefreshCw, nextStates: ['Listo', 'Cancelado'] },
    { id: 'Listo', nombre: 'Listo', color: 'purple', icon: CheckCircle, nextStates: ['Entregado'] },
    { id: 'Entregado', nombre: 'Entregado', color: 'green', icon: Check, nextStates: [] },
    { id: 'Cancelado', nombre: 'Cancelado', color: 'red', icon: XCircle, nextStates: [] }
  ];

  const metodosPago = [
    { id: 'Efectivo', nombre: 'Efectivo', icon: Banknote, color: 'green' },
    { id: 'Tarjeta', nombre: 'Tarjeta', icon: CreditCard, color: 'blue' },
    { id: 'Transferencia', nombre: 'Transferencia', icon: Landmark, color: 'indigo' },
    { id: 'Pago Móvil', nombre: 'Pago Móvil', icon: Phone, color: 'purple' },
    { id: 'Pendiente', nombre: 'Pendiente', icon: Clock, color: 'yellow' }
  ];

  // Empleado logueado
  const empleadoLogueado = {
    nombre: 'Juan Carlos',
    rol: 'gerente',
    id: 'EMP001'
  };

  // Configuración de empresa
  const empresaConfig = {
    nombre: 'BILLTRACKY LAVANDERÍA',
    slogan: 'Calidad y Confianza en cada prenda',
    telefono: '809-555-0123',
    direccion: 'Av. Principal #123, Santo Domingo',
    email: 'info@billtracky.com',
    web: 'www.billtracky.com',
    rnc: '1-31-12345-6'
  };

  // Funciones utilitarias
  const formatCurrency = (amount) => `RD$${amount.toFixed(2)}`;

  const formatDate = (dateStr) => {
    return new Date(dateStr).toLocaleDateString('es-DO', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const formatTime = (timeStr) => {
    return new Date(`2000-01-01T${timeStr}`).toLocaleTimeString('es-DO', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  };

  const generateOrderNumber = () => {
    const today = new Date();
    const year = today.getFullYear().toString().slice(-2);
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const day = today.getDate().toString().padStart(2, '0');
    const time = today.getTime().toString().slice(-4);
    return `FAC-${year}${month}${day}${time}`;
  };

  const openModal = (message) => {
    setModalMessage(message);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setModalMessage('');
  };

  const getStatusColor = (estado) => {
    const statusConfig = estados.find(s => s.id === estado);
    return statusConfig ? statusConfig.color : 'gray';
  };

  const getPaymentColor = (metodoPago) => {
    const paymentConfig = metodosPago.find(m => m.id === metodoPago);
    return paymentConfig ? paymentConfig.color : 'gray';
  };

  // Filtrado mejorado
  const filteredOrders = orders.filter(order => {
    const matchesSearch = order.numero.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.cliente.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.telefono.includes(searchTerm) ||
                         order.cedula.includes(searchTerm);
    
    const matchesStatus = filterStatus === 'all' || order.estado === filterStatus;
    const matchesPayment = filterPayment === 'all' || 
                          (filterPayment === 'paid' && order.pagado) ||
                          (filterPayment === 'pending' && !order.pagado);
    const matchesUrgent = filterUrgent === 'all' ||
                         (filterUrgent === 'urgent' && order.urgente) ||
                         (filterUrgent === 'normal' && !order.urgente);
    
    return matchesSearch && matchesStatus && matchesPayment && matchesUrgent;
  });

  // Funciones de acciones mejoradas
  const verDetalles = (order) => {
    setSelectedOrder(order);
    setShowDetailsModal(true);
  };

  const cambiarEstado = (order, nuevoEstado) => {
    if (nuevoEstado === 'Entregado' && !order.pagado) {
      openModal("❌ No se puede entregar sin cobrar. Cobre primero el pedido.");
      return;
    }

    const currentStatus = estados.find(s => s.id === order.estado);
    if (!currentStatus.nextStates.includes(nuevoEstado)) {
      openModal("❌ Transición de estado no válida.");
      return;
    }

    const ordenesActualizadas = orders.map(o => 
      o.id === order.id 
        ? { 
            ...o, 
            estado: nuevoEstado,
            ...(nuevoEstado === 'Entregado' && {
              entregado: true,
              fechaEntrega: new Date().toISOString().split('T')[0],
              horaEntrega: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })
            })
          }
        : o
    );
    
    setOrders(ordenesActualizadas);
    setShowStatusModal(false);
    openModal(`✅ Estado cambiado a "${nuevoEstado}" exitosamente.`);
  };

  const cobrarPago = (order, metodoPago) => {
    if (paymentAmount <= 0 || paymentAmount > order.total) {
      openModal("❌ Monto de pago inválido.");
      return;
    }

    const ordenesActualizadas = orders.map(o => 
      o.id === order.id 
        ? { 
            ...o, 
            pagado: true, 
            metodoPago: metodoPago,
            montoPagado: paymentAmount,
            referenciaPago: paymentReference,
            fechaPago: new Date().toISOString().split('T')[0],
            empleadoCobro: empleadoLogueado.nombre
          }
        : o
    );
    
    setOrders(ordenesActualizadas);
    setShowPaymentModal(false);
    setPaymentAmount(0);
    setPaymentReference('');
    openModal(`✅ Pago cobrado: ${metodoPago} - ${formatCurrency(paymentAmount)}`);
  };

  const cancelarOrden = () => {
    if (!cancelReason.trim()) {
      openModal("❌ Debe proporcionar un motivo de cancelación.");
      return;
    }

    const ordenesActualizadas = orders.map(o => 
      o.id === selectedOrder.id 
        ? { 
            ...o, 
            estado: 'Cancelado',
            fechaCancelacion: new Date().toISOString().split('T')[0],
            motivoCancelacion: cancelReason,
            canceladoPor: empleadoLogueado.nombre
          }
        : o
    );
    
    setOrders(ordenesActualizadas);
    setShowCancelModal(false);
    setCancelReason('');
    openModal(`✅ Orden ${selectedOrder.numero} cancelada exitosamente.`);
  };

  const eliminarOrden = () => {
    if (empleadoLogueado.rol !== 'gerente') {
      openModal("❌ Solo los gerentes pueden eliminar órdenes.");
      return;
    }

    const ordenesActualizadas = orders.filter(o => o.id !== selectedOrder.id);
    setOrders(ordenesActualizadas);
    setShowDeleteModal(false);
    openModal(`✅ Orden ${selectedOrder.numero} eliminada permanentemente.`);
  };

  const guardarNotas = () => {
    const ordenesActualizadas = orders.map(o => 
      o.id === selectedOrder.id 
        ? { ...o, notas: orderNotes }
        : o
    );
    
    setOrders(ordenesActualizadas);
    setShowNotesModal(false);
    setOrderNotes('');
    openModal("✅ Notas guardadas exitosamente.");
  };

  const enviarWhatsApp = (order) => {
    const estado = order.estado.toLowerCase();
    let mensaje = `🌟 *${empresaConfig.nombre}*\n\n`;
    mensaje += `¡Hola ${order.cliente}!\n\n`;
    mensaje += `📋 Orden: *${order.numero}*\n`;
    mensaje += `📍 Estado: *${order.estado}*\n`;
    mensaje += `💰 Total: *${formatCurrency(order.total)}*\n\n`;
    
    if (order.estado === 'Listo') {
      mensaje += `✅ Su pedido está listo para recoger\n`;
      mensaje += `📅 Fecha de retiro: ${formatDate(order.fechaRetiro)}\n`;
    } else if (order.estado === 'En Proceso') {
      mensaje += `⏳ Su pedido está siendo procesado\n`;
    }
    
    mensaje += `\n📞 ${empresaConfig.telefono}\n`;
    mensaje += `📍 ${empresaConfig.direccion}\n\n`;
    mensaje += `¡Gracias por confiar en nosotros! 🙏`;
    
    const url = `https://wa.me/${order.telefono}?text=${encodeURIComponent(mensaje)}`;
    window.open(url, '_blank');
  };

  // Función mejorada para imprimir ticket de trabajo
  const imprimirTicketTrabajo = (order) => {
    const printWindow = window.open('', '_blank');
    const articulosPendientes = order.articulos.filter(art => art.estado !== 'Completado');
    
    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Ticket de Trabajo - ${order.numero}</title>
          <style>
            body { 
              font-family: 'Courier New', monospace; 
              max-width: 400px; 
              margin: 0; 
              padding: 15px; 
              font-size: 12px;
              line-height: 1.4;
            }
            .header { 
              text-align: center; 
              border-bottom: 2px solid #000; 
              padding-bottom: 10px; 
              margin-bottom: 15px; 
            }
            .company-name {
              font-size: 16px;
              font-weight: bold;
              margin-bottom: 5px;
            }
            .section { 
              margin: 12px 0; 
              border-bottom: 1px dashed #666;
              padding-bottom: 8px;
            }
            .row { 
              display: flex; 
              justify-content: space-between; 
              margin: 3px 0; 
            }
            .label { 
              font-weight: bold; 
            }
            .articulo {
              background: #f5f5f5;
              padding: 8px;
              margin: 5px 0;
              border-radius: 4px;
            }
            .urgente {
              background: #fee;
              border: 2px solid #f00;
              padding: 10px;
              text-align: center;
              color: #f00;
              font-weight: bold;
              margin: 10px 0;
            }
            .footer {
              text-align: center;
              margin-top: 20px;
              font-size: 10px;
            }
            .checkbox {
              display: inline-block;
              width: 15px;
              height: 15px;
              border: 2px solid #000;
              margin-right: 8px;
              vertical-align: middle;
            }
            .instructions {
              background: #f9f9f9;
              padding: 10px;
              margin: 10px 0;
              border-left: 4px solid #007bff;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="company-name">${empresaConfig.nombre}</div>
            <div>TICKET DE TRABAJO</div>
            <div style="font-size: 14px; margin-top: 5px;">#${order.numero}</div>
          </div>
          
          ${order.urgente ? '<div class="urgente">⚡ ORDEN URGENTE ⚡</div>' : ''}
          
          <div class="section">
            <div class="label">INFORMACIÓN DEL CLIENTE</div>
            <div class="row"><span>Cliente:</span><span>${order.cliente}</span></div>
            <div class="row"><span>Teléfono:</span><span>${order.telefono}</span></div>
            <div class="row"><span>Recibido:</span><span>${formatDate(order.fechaRecibido)} ${formatTime(order.horaRecibido)}</span></div>
            <div class="row"><span>Fecha Retiro:</span><span>${formatDate(order.fechaRetiro)}</span></div>
            <div class="row"><span>Empleado:</span><span>${order.empleado}</span></div>
          </div>
          
          <div class="section">
            <div class="label">ARTÍCULOS A PROCESAR</div>
            ${articulosPendientes.map((art, index) => 
              `<div class="articulo">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                  <span><span class="checkbox"></span><strong>${art.cantidad}x ${art.nombre}</strong></span>
                  <span>${formatCurrency(art.cantidad * art.precio)}</span>
                </div>
                <div style="margin-top: 5px; font-size: 11px;">
                  <strong>Servicio:</strong> ${art.servicio}
                </div>
                ${art.notas ? `<div style="margin-top: 5px; font-size: 11px; color: #666;"><strong>Notas:</strong> ${art.notas}</div>` : ''}
                <div style="margin-top: 8px; font-size: 10px;">
                  Estado: <span class="checkbox"></span> En Proceso <span class="checkbox"></span> Completado
                </div>
              </div>`
            ).join('')}
          </div>
          
          ${order.notas ? `
          <div class="instructions">
            <div class="label">INSTRUCCIONES ESPECIALES</div>
            <div style="margin-top: 5px;">${order.notas}</div>
          </div>
          ` : ''}
          
          <div class="section">
            <div class="label">RESUMEN FINANCIERO</div>
            <div class="row"><span>Subtotal:</span><span>${formatCurrency(order.subtotal)}</span></div>
            <div class="row"><span>ITBIS:</span><span>${formatCurrency(order.itbis)}</span></div>
            <div class="row" style="font-weight: bold; border-top: 1px solid #000; padding-top: 5px;">
              <span>TOTAL:</span><span>${formatCurrency(order.total)}</span>
            </div>
            <div class="row"><span>Estado Pago:</span><span>${order.pagado ? '✅ PAGADO' : '❌ PENDIENTE'}</span></div>
          </div>
          
          <div class="footer">
            <div>Impreso: ${new Date().toLocaleString('es-DO')}</div>
            <div style="margin-top: 10px;">
              <div>PROCESO COMPLETADO POR:</div>
              <div style="border-bottom: 1px solid #000; width: 200px; margin: 10px auto;"></div>
              <div>Firma del Empleado</div>
            </div>
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  // Función mejorada para imprimir factura
  const imprimirFactura = (order) => {
    const printWindow = window.open('', '_blank');
    
    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Factura - ${order.numero}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              max-width: 800px; 
              margin: 0 auto; 
              padding: 20px; 
              line-height: 1.6;
            }
            .header { 
              display: flex;
              justify-content: space-between;
              align-items: start;
              border-bottom: 3px solid #007bff; 
              padding-bottom: 20px; 
              margin-bottom: 30px; 
            }
            .company-info {
              flex: 1;
            }
            .company-name {
              font-size: 24px;
              font-weight: bold;
              color: #007bff;
              margin-bottom: 5px;
            }
            .company-details {
              font-size: 12px;
              color: #666;
              line-height: 1.4;
            }
            .invoice-info {
              text-align: right;
              flex: 1;
            }
            .invoice-number {
              font-size: 20px;
              font-weight: bold;
              color: #333;
              margin-bottom: 10px;
            }
            .invoice-details {
              font-size: 14px;
              color: #666;
            }
            .section { 
              margin: 25px 0; 
            }
            .section-title {
              font-size: 16px;
              font-weight: bold;
              color: #333;
              border-bottom: 1px solid #ddd;
              padding-bottom: 5px;
              margin-bottom: 15px;
            }
            .customer-info {
              display: grid;
              grid-template-columns: 1fr 1fr;
              gap: 20px;
              background: #f8f9fa;
              padding: 20px;
              border-radius: 8px;
            }
            .info-group {
              margin-bottom: 10px;
            }
            .info-label {
              font-weight: bold;
              color: #555;
              display: block;
              margin-bottom: 2px;
            }
            .info-value {
              color: #333;
            }
            .table {
              width: 100%;
              border-collapse: collapse;
              margin: 20px 0;
            }
            .table th {
              background: #007bff;
              color: white;
              padding: 12px 8px;
              text-align: left;
              font-weight: bold;
            }
            .table td {
              padding: 10px 8px;
              border-bottom: 1px solid #ddd;
            }
            .table tr:hover {
              background: #f8f9fa;
            }
            .totals {
              margin-top: 30px;
              border: 2px solid #007bff;
              border-radius: 8px;
              overflow: hidden;
            }
            .totals-header {
              background: #007bff;
              color: white;
              padding: 12px 20px;
              font-weight: bold;
              text-align: center;
            }
            .totals-body {
              padding: 20px;
              background: white;
            }
            .total-row {
              display: flex;
              justify-content: space-between;
              margin: 8px 0;
              padding: 5px 0;
            }
            .total-row.final {
              border-top: 2px solid #007bff;
              margin-top: 15px;
              padding-top: 15px;
              font-size: 18px;
              font-weight: bold;
              color: #007bff;
            }
            .payment-info {
              background: ${order.pagado ? '#d4edda' : '#f8d7da'};
              border: 1px solid ${order.pagado ? '#c3e6cb' : '#f5c6cb'};
              border-radius: 8px;
              padding: 15px;
              margin: 20px 0;
            }
            .payment-status {
              font-size: 16px;
              font-weight: bold;
              color: ${order.pagado ? '#155724' : '#721c24'};
              margin-bottom: 10px;
            }
            .footer {
              text-align: center;
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #ddd;
              font-size: 12px;
              color: #666;
            }
            .status-badge {
              display: inline-block;
              padding: 6px 12px;
              border-radius: 20px;
              font-size: 12px;
              font-weight: bold;
              text-transform: uppercase;
              background: #${getStatusColor(order.estado) === 'green' ? '28a745' : 
                           getStatusColor(order.estado) === 'blue' ? '007bff' :
                           getStatusColor(order.estado) === 'yellow' ? 'ffc107' :
                           getStatusColor(order.estado) === 'purple' ? '6f42c1' : 'dc3545'};
              color: white;
            }
            @media print {
              body { margin: 0; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="company-info">
              <div class="company-name">${empresaConfig.nombre}</div>
              <div class="company-details">
                ${empresaConfig.slogan}<br>
                ${empresaConfig.direccion}<br>
                Tel: ${empresaConfig.telefono}<br>
                Email: ${empresaConfig.email}<br>
                RNC: ${empresaConfig.rnc}
              </div>
            </div>
            <div class="invoice-info">
              <div class="invoice-number">FACTURA</div>
              <div class="invoice-number">${order.numero}</div>
              <div class="invoice-details">
                <strong>Fecha:</strong> ${formatDate(order.fechaRecibido)}<br>
                <strong>Hora:</strong> ${formatTime(order.horaRecibido)}<br>
                <strong>Estado:</strong> <span class="status-badge">${order.estado}</span>
              </div>
            </div>
          </div>
          
          <div class="section">
            <div class="section-title">INFORMACIÓN DEL CLIENTE</div>
            <div class="customer-info">
              <div>
                <div class="info-group">
                  <span class="info-label">Cliente:</span>
                  <span class="info-value">${order.cliente}</span>
                </div>
                <div class="info-group">
                  <span class="info-label">Cédula:</span>
                  <span class="info-value">${order.cedula || 'N/A'}</span>
                </div>
                <div class="info-group">
                  <span class="info-label">Teléfono:</span>
                  <span class="info-value">${order.telefono}</span>
                </div>
              </div>
              <div>
                <div class="info-group">
                  <span class="info-label">Email:</span>
                  <span class="info-value">${order.correo || 'N/A'}</span>
                </div>
                <div class="info-group">
                  <span class="info-label">Dirección:</span>
                  <span class="info-value">${order.direccion || 'N/A'}</span>
                </div>
                <div class="info-group">
                  <span class="info-label">Atendido por:</span>
                  <span class="info-value">${order.empleado}</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="section">
            <div class="section-title">DETALLES DEL SERVICIO</div>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
              <div class="info-group">
                <span class="info-label">Fecha de Recepción:</span>
                <span class="info-value">${formatDate(order.fechaRecibido)} a las ${formatTime(order.horaRecibido)}</span>
              </div>
              <div class="info-group">
                <span class="info-label">Fecha de Entrega:</span>
                <span class="info-value">${formatDate(order.fechaRetiro)}</span>
              </div>
            </div>
            
            <table class="table">
              <thead>
                <tr>
                  <th>Cantidad</th>
                  <th>Artículo</th>
                  <th>Servicio</th>
                  <th>Precio Unit.</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                ${order.articulos.map(art => 
                  `<tr>
                    <td style="text-align: center;">${art.cantidad}</td>
                    <td>${art.nombre}</td>
                    <td>${art.servicio}</td>
                    <td style="text-align: right;">${formatCurrency(art.precio)}</td>
                    <td style="text-align: right; font-weight: bold;">${formatCurrency(art.cantidad * art.precio)}</td>
                  </tr>`
                ).join('')}
              </tbody>
            </table>
          </div>

          <div class="payment-info">
            <div class="payment-status">
              ${order.pagado ? '✅ PAGADO' : '❌ PAGO PENDIENTE'}
            </div>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <span class="info-label">Método de Pago:</span>
                <span class="info-value">${order.metodoPago}</span>
              </div>
              ${order.referenciaPago ? `
              <div>
                <span class="info-label">Referencia:</span>
                <span class="info-value">${order.referenciaPago}</span>
              </div>
              ` : ''}
            </div>
          </div>
          
          <div class="totals">
            <div class="totals-header">RESUMEN DE FACTURACIÓN</div>
            <div class="totals-body">
              <div class="total-row">
                <span>Subtotal:</span>
                <span>${formatCurrency(order.subtotal)}</span>
              </div>
              ${order.descuento > 0 ? `
              <div class="total-row">
                <span>Descuento:</span>
                <span style="color: #28a745;">-${formatCurrency(order.descuento)}</span>
              </div>
              ` : ''}
              <div class="total-row">
                <span>ITBIS (18%):</span>
                <span>${formatCurrency(order.itbis)}</span>
              </div>
              <div class="total-row final">
                <span>TOTAL A PAGAR:</span>
                <span>${formatCurrency(order.total)}</span>
              </div>
            </div>
          </div>
          
          ${order.notas ? `
          <div class="section">
            <div class="section-title">NOTAS ESPECIALES</div>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff;">
              ${order.notas}
            </div>
          </div>
          ` : ''}
          
          <div class="footer">
            <div style="margin-bottom: 20px;">
              <strong>TÉRMINOS Y CONDICIONES</strong><br>
              • Las prendas no reclamadas en 30 días serán donadas<br>
              • No nos hacemos responsables por objetos dejados en los bolsillos<br>
              • Garantizamos nuestro trabajo por 48 horas<br>
              • Para reclamos presentar esta factura
            </div>
            
            <div style="border-top: 1px solid #ddd; padding-top: 15px;">
              Factura generada el ${new Date().toLocaleString('es-DO')}<br>
              <strong>${empresaConfig.nombre}</strong> - ${empresaConfig.web}<br>
              ¡Gracias por confiar en nosotros!
            </div>
            
            ${order.entregado ? `
            <div style="margin-top: 20px; padding: 15px; background: #d4edda; border-radius: 8px;">
              <strong>✅ ORDEN ENTREGADA</strong><br>
              Fecha de entrega: ${order.fechaEntrega ? formatDate(order.fechaEntrega) : 'N/A'}<br>
              Hora de entrega: ${order.horaEntrega || 'N/A'}
            </div>
            ` : ''}
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  // Función para generar reporte
  const generarReporte = () => {
    const filteredForReport = orders.filter(order => {
      const orderDate = new Date(order.fechaRecibido);
      const reportDateObj = new Date(reportDate);
      
      switch(reportType) {
        case 'daily':
          return orderDate.toDateString() === reportDateObj.toDateString();
        case 'weekly':
          const weekStart = new Date(reportDateObj);
          weekStart.setDate(reportDateObj.getDate() - 7);
          return orderDate >= weekStart && orderDate <= reportDateObj;
        case 'monthly':
          return orderDate.getMonth() === reportDateObj.getMonth() && 
                 orderDate.getFullYear() === reportDateObj.getFullYear();
        default:
          return true;
      }
    });

    const totalVentas = filteredForReport.reduce((sum, order) => sum + order.total, 0);
    const ventasPagadas = filteredForReport.filter(o => o.pagado).reduce((sum, order) => sum + order.total, 0);
    const ventasPendientes = totalVentas - ventasPagadas;

    const printWindow = window.open('', '_blank');
    
    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Reporte de Ventas - ${reportType}</title>
          <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .header { text-align: center; border-bottom: 2px solid #007bff; padding-bottom: 20px; margin-bottom: 30px; }
            .company-name { font-size: 24px; font-weight: bold; color: #007bff; }
            .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }
            .stat-card { background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; border-left: 4px solid #007bff; }
            .stat-value { font-size: 24px; font-weight: bold; color: #007bff; }
            .stat-label { font-size: 14px; color: #666; margin-top: 5px; }
            .table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            .table th { background: #007bff; color: white; padding: 12px 8px; text-align: left; }
            .table td { padding: 10px 8px; border-bottom: 1px solid #ddd; }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="company-name">${empresaConfig.nombre}</div>
            <h2>Reporte de Ventas - ${reportType.charAt(0).toUpperCase() + reportType.slice(1)}</h2>
            <p>Fecha: ${formatDate(reportDate)}</p>
          </div>
          
          <div class="stats">
            <div class="stat-card">
              <div class="stat-value">${filteredForReport.length}</div>
              <div class="stat-label">Total Órdenes</div>
            </div>
            <div class="stat-card">
              <div class="stat-value">${formatCurrency(totalVentas)}</div>
              <div class="stat-label">Ventas Totales</div>
            </div>
            <div class="stat-card">
              <div class="stat-value">${formatCurrency(ventasPagadas)}</div>
              <div class="stat-label">Ventas Cobradas</div>
            </div>
            <div class="stat-card">
              <div class="stat-value">${formatCurrency(ventasPendientes)}</div>
              <div class="stat-label">Pendientes de Cobro</div>
            </div>
          </div>
          
          <table class="table">
            <thead>
              <tr>
                <th>Factura</th>
                <th>Cliente</th>
                <th>Fecha</th>
                <th>Estado</th>
                <th>Método Pago</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              ${filteredForReport.map(order => `
                <tr>
                  <td>${order.numero}</td>
                  <td>${order.cliente}</td>
                  <td>${formatDate(order.fechaRecibido)}</td>
                  <td>${order.estado}</td>
                  <td>${order.metodoPago}</td>
                  <td style="text-align: right; font-weight: bold;">${formatCurrency(order.total)}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
          
          <div style="text-align: center; margin-top: 40px; font-size: 12px; color: #666;">
            Reporte generado el ${new Date().toLocaleString('es-DO')}
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  // Componentes de modales
  const Modal = () => {
    if (!isModalOpen) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
          <div className="text-center">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Check className="w-8 h-8 text-blue-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Sistema de Gestión</h3>
            <p className="text-gray-600 mb-6">{modalMessage}</p>
            <button
              onClick={closeModal}
              className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium transition-colors"
            >
              Aceptar
            </button>
          </div>
        </div>
      </div>
    );
  };

  const DetailsModal = () => {
    if (!showDetailsModal || !selectedOrder) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto p-6 shadow-2xl">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h3 className="text-2xl font-bold text-gray-900">Detalles de Orden</h3>
              <p className="text-gray-600">{selectedOrder.numero}</p>
            </div>
            <button
              onClick={() => setShowDetailsModal(false)}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Información del Cliente */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h4 className="font-semibold text-gray-900 mb-4 flex items-center">
                <User className="w-5 h-5 mr-2 text-blue-600" />
                Información del Cliente
              </h4>
              <div className="space-y-3 text-sm">
                <div>
                  <span className="text-gray-600">Nombre:</span>
                  <p className="font-medium">{selectedOrder.cliente}</p>
                </div>
                <div>
                  <span className="text-gray-600">Cédula:</span>
                  <p className="font-medium">{selectedOrder.cedula || 'N/A'}</p>
                </div>
                <div>
                  <span className="text-gray-600">Teléfono:</span>
                  <p className="font-medium">{selectedOrder.telefono}</p>
                </div>
                <div>
                  <span className="text-gray-600">Email:</span>
                  <p className="font-medium">{selectedOrder.correo || 'N/A'}</p>
                </div>
                <div>
                  <span className="text-gray-600">Dirección:</span>
                  <p className="font-medium">{selectedOrder.direccion || 'N/A'}</p>
                </div>
              </div>
            </div>
            
            {/* Información de la Orden */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h4 className="font-semibold text-gray-900 mb-4 flex items-center">
                <Package className="w-5 h-5 mr-2 text-green-600" />
                Detalles de la Orden
              </h4>
              <div className="space-y-3 text-sm">
                <div>
                  <span className="text-gray-600">Estado:</span>
                  <span className={`ml-2 px-3 py-1 text-xs font-medium rounded-full bg-${getStatusColor(selectedOrder.estado)}-100 text-${getStatusColor(selectedOrder.estado)}-800`}>
                    {selectedOrder.estado}
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">Prioridad:</span>
                  <span className={`ml-2 px-3 py-1 text-xs font-medium rounded-full ${selectedOrder.urgente ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-800'}`}>
                    {selectedOrder.urgente ? '🔥 URGENTE' : '📋 NORMAL'}
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">Recibido:</span>
                  <p className="font-medium">{formatDate(selectedOrder.fechaRecibido)} a las {formatTime(selectedOrder.horaRecibido)}</p>
                </div>
                <div>
                  <span className="text-gray-600">Fecha de Entrega:</span>
                  <p className="font-medium">{formatDate(selectedOrder.fechaRetiro)}</p>
                </div>
                <div>
                  <span className="text-gray-600">Atendido por:</span>
                  <p className="font-medium">{selectedOrder.empleado}</p>
                </div>
                {selectedOrder.entregado && (
                  <div>
                    <span className="text-gray-600">Entregado:</span>
                    <p className="font-medium text-green-600">{selectedOrder.fechaEntrega} a las {selectedOrder.horaEntrega}</p>
                  </div>
                )}
              </div>
            </div>
            
            {/* Información de Pago */}
            <div className="bg-gray-50 rounded-xl p-6">
              <h4 className="font-semibold text-gray-900 mb-4 flex items-center">
                <DollarSign className="w-5 h-5 mr-2 text-purple-600" />
                Información de Pago
              </h4>
              <div className="space-y-3 text-sm">
                <div>
                  <span className="text-gray-600">Estado del Pago:</span>
                  <span className={`ml-2 px-3 py-1 text-xs font-medium rounded-full ${selectedOrder.pagado ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {selectedOrder.pagado ? '✅ PAGADO' : '❌ PENDIENTE'}
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">Método de Pago:</span>
                  <span className={`ml-2 px-3 py-1 text-xs font-medium rounded-full bg-${getPaymentColor(selectedOrder.metodoPago)}-100 text-${getPaymentColor(selectedOrder.metodoPago)}-800`}>
                    {selectedOrder.metodoPago}
                  </span>
                </div>
                {selectedOrder.referenciaPago && (
                  <div>
                    <span className="text-gray-600">Referencia:</span>
                    <p className="font-medium">{selectedOrder.referenciaPago}</p>
                  </div>
                )}
                <div className="border-t pt-3 mt-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Subtotal:</span>
                    <span className="font-medium">{formatCurrency(selectedOrder.subtotal)}</span>
                  </div>
                  {selectedOrder.descuento > 0 && (
                    <div className="flex justify-between">
                      <span className="text-gray-600">Descuento:</span>
                      <span className="font-medium text-green-600">-{formatCurrency(selectedOrder.descuento)}</span>
                    </div>
                  )}
                  <div className="flex justify-between">
                    <span className="text-gray-600">ITBIS:</span>
                    <span className="font-medium">{formatCurrency(selectedOrder.itbis)}</span>
                  </div>
                  <div className="flex justify-between border-t pt-2 mt-2">
                    <span className="font-bold">Total:</span>
                    <span className="font-bold text-blue-600">{formatCurrency(selectedOrder.total)}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Artículos */}
          <div className="mt-6">
            <h4 className="font-semibold text-gray-900 mb-4 flex items-center">
              <ClipboardList className="w-5 h-5 mr-2 text-orange-600" />
              Artículos de la Orden
            </h4>
            <div className="bg-white border rounded-xl overflow-hidden">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Artículo</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Servicio</th>
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">Cantidad</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">Precio</th>
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">Estado</th>
                    <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">Total</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {selectedOrder.articulos.map((articulo, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-4 py-3">
                        <div>
                          <p className="font-medium">{articulo.nombre}</p>
                          {articulo.notas && (
                            <p className="text-xs text-gray-500 mt-1">{articulo.notas}</p>
                          )}
                        </div>
                      </td>
                      <td className="px-4 py-3 text-sm">{articulo.servicio}</td>
                      <td className="px-4 py-3 text-center font-medium">{articulo.cantidad}</td>
                      <td className="px-4 py-3 text-right font-medium">{formatCurrency(articulo.precio)}</td>
                      <td className="px-4 py-3 text-center">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                          articulo.estado === 'Completado' ? 'bg-green-100 text-green-800' :
                          articulo.estado === 'En Proceso' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {articulo.estado}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-right font-bold">{formatCurrency(articulo.cantidad * articulo.precio)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Notas */}
          {selectedOrder.notas && (
            <div className="mt-6">
              <h4 className="font-semibold text-gray-900 mb-3">Notas Especiales</h4>
              <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
                <p className="text-blue-700">{selectedOrder.notas}</p>
              </div>
            </div>
          )}

          {/* Información de Cancelación */}
          {selectedOrder.estado === 'Cancelado' && selectedOrder.motivoCancelacion && (
            <div className="mt-6">
              <h4 className="font-semibold text-gray-900 mb-3">Información de Cancelación</h4>
              <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg">
                <p className="text-red-700 font-medium">Motivo: {selectedOrder.motivoCancelacion}</p>
                <p className="text-xs text-red-600 mt-2">
                  Cancelado el {formatDate(selectedOrder.fechaCancelacion)} por {selectedOrder.canceladoPor}
                </p>
              </div>
            </div>
          )}

          {/* Acciones */}
          <div className="mt-6 flex flex-wrap gap-3 justify-center">
            <button
              onClick={() => imprimirFactura(selectedOrder)}
              className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Receipt className="w-4 h-4 mr-2" />
              Imprimir Factura
            </button>
            <button
              onClick={() => imprimirTicketTrabajo(selectedOrder)}
              className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              <ClipboardList className="w-4 h-4 mr-2" />
              Ticket de Trabajo
            </button>
            <button
              onClick={() => enviarWhatsApp(selectedOrder)}
              className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              <Send className="w-4 h-4 mr-2" />
              WhatsApp
            </button>
          </div>
        </div>
      </div>
    );
  };

  const StatusModal = () => {
    if (!showStatusModal || !selectedOrder) return null;
    
    const currentStatus = estados.find(s => s.id === selectedOrder.estado);
    const availableStates = estados.filter(estado => 
      currentStatus.nextStates.includes(estado.id)
    );
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold text-gray-900">Cambiar Estado</h3>
            <button
              onClick={() => setShowStatusModal(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="mb-4 p-4 bg-gray-50 rounded-lg">
            <p className="text-sm text-gray-600">Estado actual:</p>
            <p className="font-semibold text-gray-900">{selectedOrder.estado}</p>
          </div>
          
          <div className="space-y-3">
            {availableStates.length > 0 ? (
              availableStates.map((estado) => {
                const IconComponent = estado.icon;
                return (
                  <button
                    key={estado.id}
                    onClick={() => cambiarEstado(selectedOrder, estado.id)}
                    className={`w-full p-4 rounded-lg border-2 border-gray-200 hover:border-${estado.color}-500 hover:bg-${estado.color}-50 transition-all duration-200 flex items-center space-x-3`}
                  >
                    <IconComponent className={`w-6 h-6 text-${estado.color}-600`} />
                    <span className="font-medium text-gray-900">{estado.nombre}</span>
                  </button>
                );
              })
            ) : (
              <p className="text-center text-gray-500 py-4">
                No hay transiciones de estado disponibles
              </p>
            )}
          </div>
        </div>
      </div>
    );
  };

  const PaymentModal = () => {
    if (!showPaymentModal || !selectedOrder) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold text-gray-900">Procesar Pago</h3>
            <button
              onClick={() => setShowPaymentModal(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="text-center mb-6">
            <p className="text-gray-600">Total a cobrar:</p>
            <p className="text-3xl font-bold text-blue-600">{formatCurrency(selectedOrder.total)}</p>
          </div>
          
          <div className="space-y-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Monto a cobrar
              </label>
              <input
                type="number"
                value={paymentAmount || selectedOrder.total}
                onChange={(e) => setPaymentAmount(parseFloat(e.target.value))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="0.00"
                step="0.01"
                min="0"
                max={selectedOrder.total}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Referencia de pago (opcional)
              </label>
              <input
                type="text"
                value={paymentReference}
                onChange={(e) => setPaymentReference(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="Ej: #123456, Voucher ABC, etc."
              />
            </div>
          </div>
          
          <div className="space-y-3">
            <p className="text-sm font-medium text-gray-700 mb-3">Seleccione método de pago:</p>
            {metodosPago.filter(metodo => metodo.id !== 'Pendiente').map((metodo) => {
              const IconComponent = metodo.icon;
              return (
                <button
                  key={metodo.id}
                  onClick={() => cobrarPago(selectedOrder, metodo.nombre)}
                  className={`w-full p-4 rounded-lg border-2 border-gray-200 hover:border-${metodo.color}-500 hover:bg-${metodo.color}-50 transition-all duration-200 flex items-center space-x-3`}
                >
                  <IconComponent className={`w-6 h-6 text-${metodo.color}-600`} />
                  <span className="font-medium text-gray-900">{metodo.nombre}</span>
                </button>
              );
            })}
          </div>
        </div>
      </div>
    );
  };

  const CancelModal = () => {
    if (!showCancelModal || !selectedOrder) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold text-gray-900">Cancelar Orden</h3>
            <button
              onClick={() => setShowCancelModal(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <AlertCircle className="w-8 h-8 text-orange-600" />
            </div>
            <p className="text-gray-600">
              ¿Está seguro que desea cancelar la orden <strong>{selectedOrder.numero}</strong>?
            </p>
            <p className="text-sm text-gray-500 mt-2">
              Esta acción cambiará el estado de la orden pero no la eliminará del sistema.
            </p>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Motivo de cancelación *
              </label>
              <textarea
                value={cancelReason}
                onChange={(e) => setCancelReason(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
                rows={3}
                placeholder="Ej: Cliente no recogió a tiempo, problema con la prenda, solicitud del cliente, etc."
              />
            </div>
          </div>
          
          <div className="flex space-x-3 mt-6">
            <button
              onClick={() => setShowCancelModal(false)}
              className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium transition-colors"
            >
              Cancelar
            </button>
            <button
              onClick={cancelarOrden}
              className="flex-1 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 font-medium transition-colors"
            >
              Confirmar Cancelación
            </button>
          </div>
        </div>
      </div>
    );
  };

  const DeleteModal = () => {
    if (!showDeleteModal || !selectedOrder) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold text-gray-900">Eliminar Orden</h3>
            <button
              onClick={() => setShowDeleteModal(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Trash2 className="w-8 h-8 text-red-600" />
            </div>
            <p className="text-gray-600 mb-2">
              ¿Está seguro que desea eliminar permanentemente la orden <strong>{selectedOrder.numero}</strong>?
            </p>
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mt-4">
              <p className="text-sm text-red-800 font-medium">⚠️ ADVERTENCIA</p>
              <p className="text-sm text-red-700 mt-1">
                Esta acción es irreversible. La orden será eliminada permanentemente del sistema.
                Solo gerentes pueden realizar esta acción.
              </p>
            </div>
          </div>
          
          <div className="flex space-x-3">
            <button
              onClick={() => setShowDeleteModal(false)}
              className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium transition-colors"
            >
              Cancelar
            </button>
            <button
              onClick={eliminarOrden}
              className="flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium transition-colors"
            >
              Eliminar Permanentemente
            </button>
          </div>
        </div>
      </div>
    );
  };

  const NotesModal = () => {
    if (!showNotesModal || !selectedOrder) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold text-gray-900">Editar Notas</h3>
            <button
              onClick={() => setShowNotesModal(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Notas de la orden
              </label>
              <textarea
                value={orderNotes}
                onChange={(e) => setOrderNotes(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                rows={4}
                placeholder="Agregue instrucciones especiales, preferencias del cliente, etc."
              />
            </div>
          </div>
          
          <div className="flex space-x-3 mt-6">
            <button
              onClick={() => setShowNotesModal(false)}
              className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium transition-colors"
            >
              Cancelar
            </button>
            <button
              onClick={guardarNotas}
              className="flex-1 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors"
            >
              Guardar Notas
            </button>
          </div>
        </div>
      </div>
    );
  };

  const ReportsModal = () => {
    if (!showReports) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold text-gray-900">Generar Reporte</h3>
            <button
              onClick={() => setShowReports(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tipo de Reporte
              </label>
              <select
                value={reportType}
                onChange={(e) => setReportType(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="daily">Reporte Diario</option>
                <option value="weekly">Reporte Semanal</option>
                <option value="monthly">Reporte Mensual</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Fecha de Referencia
              </label>
              <input
                type="date"
                value={reportDate}
                onChange={(e) => setReportDate(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          
          <div className="flex space-x-3 mt-6">
            <button
              onClick={() => setShowReports(false)}
              className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium transition-colors"
            >
              Cancelar
            </button>
            <button
              onClick={generarReporte}
              className="flex-1 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors flex items-center justify-center"
            >
              <Download className="w-4 h-4 mr-2" />
              Generar
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Estadísticas rápidas
  const stats = {
    total: orders.length,
    pendientesPago: orders.filter(o => !o.pagado && o.estado !== 'Cancelado').length,
    enProceso: orders.filter(o => o.estado === 'En Proceso').length,
    listos: orders.filter(o => o.estado === 'Listo').length,
    urgentes: orders.filter(o => o.urgente && o.estado !== 'Entregado' && o.estado !== 'Cancelado').length,
    totalVentas: orders.filter(o => o.pagado).reduce((sum, o) => sum + o.total, 0),
    ventasPendientes: orders.filter(o => !o.pagado && o.estado !== 'Cancelado').reduce((sum, o) => sum + o.total, 0)
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header con estadísticas */}
        <div className="bg-white rounded-xl shadow-sm border p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center">
                <FileText className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Sistema de Gestión de Órdenes</h1>
                <p className="text-gray-600">Panel profesional de control y seguimiento</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setShowReports(true)}
                className="flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              >
                <TrendingUp className="w-4 h-4 mr-2" />
                Reportes
              </button>
              <div className="text-right">
                <p className="text-sm text-gray-500">Empleado</p>
                <p className="text-lg font-bold text-blue-600">{empleadoLogueado.nombre}</p>
                <p className="text-xs text-gray-500 capitalize">{empleadoLogueado.rol}</p>
              </div>
            </div>
          </div>
          
          {/* Estadísticas rápidas */}
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
            <div className="bg-blue-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
              <div className="text-xs text-blue-600 font-medium">Total Órdenes</div>
            </div>
            <div className="bg-red-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-red-600">{stats.pendientesPago}</div>
              <div className="text-xs text-red-600 font-medium">Pendientes Pago</div>
            </div>
            <div className="bg-yellow-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">{stats.enProceso}</div>
              <div className="text-xs text-yellow-600 font-medium">En Proceso</div>
            </div>
            <div className="bg-purple-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-purple-600">{stats.listos}</div>
              <div className="text-xs text-purple-600 font-medium">Listos</div>
            </div>
            <div className="bg-orange-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-orange-600">{stats.urgentes}</div>
              <div className="text-xs text-orange-600 font-medium">Urgentes</div>
            </div>
            <div className="bg-green-50 rounded-lg p-4 text-center">
              <div className="text-xl font-bold text-green-600">{formatCurrency(stats.totalVentas)}</div>
              <div className="text-xs text-green-600 font-medium">Ventas Cobradas</div>
            </div>
            <div className="bg-gray-50 rounded-lg p-4 text-center">
              <div className="text-xl font-bold text-gray-600">{formatCurrency(stats.ventasPendientes)}</div>
              <div className="text-xs text-gray-600 font-medium">Por Cobrar</div>
            </div>
          </div>
        </div>

        {/* Filtros y búsqueda avanzada */}
        <div className="bg-white rounded-xl shadow-sm border p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div className="md:col-span-2">
              <div className="relative">
                <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
                <input
                  type="text"
                  placeholder="Buscar por nombre, teléfono o correo..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
            
            <div>
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">🔍 Todos los estados</option>
                {estados.map((estado) => (
                  <option key={estado.id} value={estado.id}>
                    {estado.nombre} ({orders.filter(o => o.estado === estado.id).length})
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <select
                value={filterPayment}
                onChange={(e) => setFilterPayment(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">💰 Estado de pago</option>
                <option value="paid">✅ Pagados ({orders.filter(o => o.pagado).length})</option>
                <option value="pending">❌ Pendientes ({orders.filter(o => !o.pagado).length})</option>
              </select>
            </div>
            
            <div>
              <select
                value={filterUrgent}
                onChange={(e) => setFilterUrgent(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">⚡ Prioridad</option>
                <option value="urgent">🔥 Urgentes ({orders.filter(o => o.urgente).length})</option>
                <option value="normal">📋 Normales ({orders.filter(o => !o.urgente).length})</option>
              </select>
            </div>
          </div>
        </div>

        {/* Lista de órdenes mejorada */}
        <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Orden
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Cliente
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Fechas
                  </th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Estado
                  </th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Pago
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Total
                  </th>
                  <th className="px-6 py-4 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Acciones
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredOrders.map((order) => (
                  <tr 
                    key={order.id} 
                    className={`hover:bg-gray-50 transition-colors ${
                      order.estado === 'Cancelado' ? 'bg-red-50' : 
                      order.urgente ? 'bg-orange-50' : ''
                    }`}
                  >
                    <td className="px-6 py-4">
                      <div className="flex items-center">
                        <div>
                          <p className="font-semibold text-gray-900">{order.numero}</p>
                          <p className="text-xs text-gray-500">#{order.id}</p>
                          {order.urgente && (
                            <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800 mt-1">
                              🔥 URGENTE
                            </span>
                          )}
                        </div>
                      </div>
                    </td>
                    
                    <td className="px-6 py-4">
                      <div>
                        <p className="font-medium text-gray-900">{order.cliente}</p>
                        <div className="flex items-center text-xs text-gray-500 mt-1">
                          <Phone className="w-3 h-3 mr-1" />
                          {order.telefono}
                        </div>
                        {order.correo && (
                          <div className="flex items-center text-xs text-gray-500">
                            <Mail className="w-3 h-3 mr-1" />
                            {order.correo}
                          </div>
                        )}
                      </div>
                    </td>
                    
                    <td className="px-6 py-4 text-sm">
                      <div>
                        <div className="flex items-center text-gray-900">
                          <Calendar className="w-4 h-4 mr-1 text-blue-500" />
                          <span className="font-medium">Recibido:</span>
                        </div>
                        <p className="text-xs text-gray-600 ml-5">
                          {formatDate(order.fechaRecibido)} • {formatTime(order.horaRecibido)}
                        </p>
                        
                        <div className="flex items-center text-gray-900 mt-2">
                          <Clock className="w-4 h-4 mr-1 text-purple-500" />
                          <span className="font-medium">Entrega:</span>
                        </div>
                        <p className="text-xs text-gray-600 ml-5">{formatDate(order.fechaRetiro)}</p>
                        
                        {order.entregado && order.horaEntrega && (
                          <p className="text-xs text-green-600 mt-1 ml-5">
                            ✅ Entregado: {order.horaEntrega}
                          </p>
                        )}
                      </div>
                    </td>
                    
                    <td className="px-6 py-4 text-center">
                      <button
                        onClick={() => {
                          if (order.estado === 'Cancelado' || order.estado === 'Entregado') return;
                          setSelectedOrder(order);
                          setShowStatusModal(true);
                        }}
                        disabled={order.estado === 'Cancelado' || order.estado === 'Entregado'}
                        className={`px-3 py-2 text-xs font-medium rounded-full transition-all ${
                          order.estado === 'Cancelado' || order.estado === 'Entregado' 
                            ? 'cursor-not-allowed opacity-75' 
                            : 'cursor-pointer hover:opacity-80 hover:scale-105'
                        } bg-${getStatusColor(order.estado)}-100 text-${getStatusColor(order.estado)}-800 border border-${getStatusColor(order.estado)}-200`}
                      >
                        {order.estado}
                      </button>
                    </td>
                    
                    <td className="px-6 py-4 text-center">
                      <div className="space-y-1">
                        <span className={`px-3 py-1 text-xs font-medium rounded-full bg-${getPaymentColor(order.metodoPago)}-100 text-${getPaymentColor(order.metodoPago)}-800`}>
                          {order.metodoPago}
                        </span>
                        <div className={`text-xs font-medium ${order.pagado ? 'text-green-600' : 'text-red-600'}`}>
                          {order.pagado ? '✅ PAGADO' : '❌ PENDIENTE'}
                        </div>
                      </div>
                    </td>
                    
                    <td className="px-6 py-4 text-right">
                      <div>
                        <p className="text-lg font-bold text-gray-900">{formatCurrency(order.total)}</p>
                        <p className="text-xs text-gray-500">
                          {order.articulos.length} artículo{order.articulos.length !== 1 ? 's' : ''}
                        </p>
                      </div>
                    </td>
                    
                    <td className="px-6 py-4">
                      <div className="flex items-center justify-center space-x-2">
                        {/* Botón de pago - Solo si no está pagado y no está cancelado */}
                        {!order.pagado && order.estado !== 'Cancelado' && (
                          <button 
                            onClick={() => {
                              setSelectedOrder(order);
                              setPaymentAmount(order.total);
                              setShowPaymentModal(true);
                            }}
                            className="p-2 text-green-600 hover:text-green-900 hover:bg-green-50 rounded-lg transition-colors"
                            title="💰 Cobrar pago"
                          >
                            <DollarSign className="w-4 h-4" />
                          </button>
                        )}
                        
                        {/* Botón WhatsApp - Siempre disponible excepto cancelados */}
                        {order.estado !== 'Cancelado' && (
                          <button 
                            onClick={() => enviarWhatsApp(order)}
                            className="p-2 text-green-600 hover:text-green-900 hover:bg-green-50 rounded-lg transition-colors"
                            title="📱 Enviar WhatsApp"
                          >
                            <Send className="w-4 h-4" />
                          </button>
                        )}
                        
                        {/* Botón Ticket de Trabajo - Solo si no está entregado o cancelado */}
                        {order.estado !== 'Cancelado' && order.estado !== 'Entregado' && (
                          <button 
                            onClick={() => imprimirTicketTrabajo(order)}
                            className="p-2 text-blue-600 hover:text-blue-900 hover:bg-blue-50 rounded-lg transition-colors" 
                            title="📋 Ticket de trabajo"
                          >
                            <ClipboardList className="w-4 h-4" />
                          </button>
                        )}
                        
                        {/* Botón Imprimir Factura - Siempre disponible */}
                        <button 
                          onClick={() => imprimirFactura(order)}
                          className="p-2 text-purple-600 hover:text-purple-900 hover:bg-purple-50 rounded-lg transition-colors" 
                          title="🧾 Imprimir factura"
                        >
                          <Receipt className="w-4 h-4" />
                        </button>
                        
                        {/* Botón Ver Detalles - Siempre disponible */}
                        <button 
                          onClick={() => verDetalles(order)}
                          className="p-2 text-cyan-600 hover:text-cyan-900 hover:bg-cyan-50 rounded-lg transition-colors" 
                          title="👁️ Ver detalles completos"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        
                        {/* Menú de Supervisor/Gerente */}
                        {empleadoLogueado.rol === 'gerente' && (
                          <div className="relative group">
                            <button className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg transition-colors" title="⚙️ Opciones de administrador">
                              <MoreVertical className="w-4 h-4" />
                            </button>
                            <div className="absolute right-0 top-8 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                              {/* Editar Notas */}
                              <button
                                onClick={() => {
                                  setSelectedOrder(order);
                                  setOrderNotes(order.notas || '');
                                  setShowNotesModal(true);
                                }}
                                className="w-full text-left px-4 py-2 text-sm text-indigo-600 hover:bg-indigo-50 flex items-center"
                              >
                                <Edit3 className="w-4 h-4 mr-2" />
                                Editar Notas
                              </button>
                              
                              {/* Cancelar Orden - Solo si no está entregado o ya cancelado */}
                              {order.estado !== 'Cancelado' && order.estado !== 'Entregado' && (
                                <button
                                  onClick={() => {
                                    setSelectedOrder(order);
                                    setShowCancelModal(true);
                                  }}
                                  className="w-full text-left px-4 py-2 text-sm text-orange-600 hover:bg-orange-50 flex items-center"
                                >
                                  <XCircle className="w-4 h-4 mr-2" />
                                  Cancelar Orden
                                </button>
                              )}
                              
                              {/* Eliminar Orden - Siempre disponible para gerente */}
                              <button
                                onClick={() => {
                                  setSelectedOrder(order);
                                  setShowDeleteModal(true);
                                }}
                                className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center border-t border-gray-100"
                              >
                                <Trash2 className="w-4 h-4 mr-2" />
                                Eliminar Permanentemente
                              </button>
                            </div>
                          </div>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          {filteredOrders.length === 0 && (
            <div className="text-center py-12 text-gray-500">
              <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No se encontraron órdenes</h3>
              <p className="text-gray-600">No hay órdenes que coincidan con los filtros aplicados.</p>
            </div>
          )}
        </div>

        {/* Resumen de estadísticas por estado */}
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mt-6">
          {estados.map((estado) => {
            const count = orders.filter(o => o.estado === estado.id).length;
            const IconComponent = estado.icon;
            const percentage = orders.length > 0 ? ((count / orders.length) * 100).toFixed(1) : 0;
            
            return (
              <div key={estado.id} className="bg-white rounded-xl shadow-sm border p-6 hover:shadow-md transition-shadow">
                <div className="flex items-center justify-between">
                  <div className={`w-12 h-12 bg-${estado.color}-100 rounded-lg flex items-center justify-center`}>
                    <IconComponent className={`w-6 h-6 text-${estado.color}-600`} />
                  </div>
                  <div className="text-right">
                    <p className="text-2xl font-bold text-gray-900">{count}</p>
                    <p className="text-xs text-gray-500">{percentage}%</p>
                  </div>
                </div>
                <div className="mt-4">
                  <p className="text-sm font-medium text-gray-900">{estado.nombre}</p>
                  <div className={`w-full bg-gray-200 rounded-full h-2 mt-2`}>
                    <div 
                      className={`bg-${estado.color}-500 h-2 rounded-full transition-all duration-500`}
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* Panel de información adicional */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
          {/* Órdenes urgentes */}
          {stats.urgentes > 0 && (
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                  <AlertCircle className="w-5 h-5 text-red-600" />
                </div>
                <div className="ml-3">
                  <h3 className="text-lg font-semibold text-gray-900">Órdenes Urgentes</h3>
                  <p className="text-sm text-gray-600">{stats.urgentes} órdenes requieren atención inmediata</p>
                </div>
              </div>
              <div className="space-y-3">
                {orders.filter(o => o.urgente && o.estado !== 'Entregado' && o.estado !== 'Cancelado').slice(0, 3).map(order => (
                  <div key={order.id} className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                    <div>
                      <p className="font-medium text-gray-900">{order.numero}</p>
                      <p className="text-sm text-gray-600">{order.cliente}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium text-red-600">{order.estado}</p>
                      <p className="text-xs text-gray-500">{formatDate(order.fechaRetiro)}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Resumen financiero */}
          <div className="bg-white rounded-xl shadow-sm border p-6">
            <div className="flex items-center mb-4">
              <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                <TrendingUp className="w-5 h-5 text-green-600" />
              </div>
              <div className="ml-3">
                <h3 className="text-lg font-semibold text-gray-900">Resumen Financiero</h3>
                <p className="text-sm text-gray-600">Estado actual de las ventas</p>
              </div>
            </div>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Ventas Cobradas</span>
                <span className="text-lg font-bold text-green-600">{formatCurrency(stats.totalVentas)}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Pendientes de Cobro</span>
                <span className="text-lg font-bold text-red-600">{formatCurrency(stats.ventasPendientes)}</span>
              </div>
              <div className="border-t pt-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-900 font-medium">Total General</span>
                  <span className="text-xl font-bold text-blue-600">
                    {formatCurrency(stats.totalVentas + stats.ventasPendientes)}
                  </span>
                </div>
              </div>
              {stats.ventasPendientes > 0 && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                  <p className="text-sm text-yellow-800">
                    💡 Hay {formatCurrency(stats.ventasPendientes)} pendientes por cobrar
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Footer con información de la empresa */}
        <div className="bg-white rounded-xl shadow-sm border p-6 mt-6">
          <div className="text-center">
            <h3 className="text-lg font-bold text-gray-900 mb-2">{empresaConfig.nombre}</h3>
            <p className="text-gray-600 mb-4">{empresaConfig.slogan}</p>
            <div className="flex items-center justify-center space-x-6 text-sm text-gray-500">
              <div className="flex items-center">
                <Phone className="w-4 h-4 mr-1" />
                {empresaConfig.telefono}
              </div>
              <div className="flex items-center">
                <Mail className="w-4 h-4 mr-1" />
                {empresaConfig.email}
              </div>
              <div className="flex items-center">
                <MapPin className="w-4 h-4 mr-1" />
                {empresaConfig.direccion}
              </div>
            </div>
            <p className="text-xs text-gray-400 mt-4">
              Sistema actualizado: {new Date().toLocaleString('es-DO')}
            </p>
          </div>
        </div>
      </div>

      {/* Todos los modales */}
      <Modal />
      <DetailsModal />
      <StatusModal />
      <PaymentModal />
      <CancelModal />
      <DeleteModal />
      <NotesModal />
      <ReportsModal />
    </div>
  );
};

export default GestionOrdenes;